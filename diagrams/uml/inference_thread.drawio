<mxGraphModel dx="0" dy="0" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" background="none" math="0" shadow="0">
  <root>
    <mxCell id="0" />
    <mxCell id="1" parent="0" />
    <mxCell id="node1" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.QtCore.QObject&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; staticMetaObject: &lt;br/&gt; objectNameChanged: &lt;br/&gt; destroyed: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, parent: typing.Optional[&amp;#39;QObject&amp;#39;] = ...): &lt;br/&gt; disconnect(a0: &amp;#39;QMetaObject.Connection&amp;#39;): &lt;br/&gt; disconnect(self): &lt;br/&gt; isSignalConnected(self, signal: &amp;#39;QMetaMethod&amp;#39;): &lt;br/&gt; senderSignalIndex(self): &lt;br/&gt; disconnectNotify(self, signal: &amp;#39;QMetaMethod&amp;#39;): &lt;br/&gt; connectNotify(self, signal: &amp;#39;QMetaMethod&amp;#39;): &lt;br/&gt; customEvent(self, a0: typing.Optional[&amp;#39;QEvent&amp;#39;]): &lt;br/&gt; childEvent(self, a0: typing.Optional[&amp;#39;QChildEvent&amp;#39;]): &lt;br/&gt; timerEvent(self, a0: typing.Optional[&amp;#39;QTimerEvent&amp;#39;]): &lt;br/&gt; receivers(self, signal: PYQT_SIGNAL): &lt;br/&gt; sender(self): &lt;br/&gt; deleteLater(self): &lt;br/&gt; inherits(self, classname: typing.Optional[str]): &lt;br/&gt; parent(self): &lt;br/&gt; property(self, name: typing.Optional[str]): &lt;br/&gt; setProperty(self, name: typing.Optional[str], value: typing.Any): &lt;br/&gt; dynamicPropertyNames(self): &lt;br/&gt; dumpObjectTree(self): &lt;br/&gt; dumpObjectInfo(self): &lt;br/&gt; removeEventFilter(self, a0: typing.Optional[&amp;#39;QObject&amp;#39;]): &lt;br/&gt; installEventFilter(self, a0: typing.Optional[&amp;#39;QObject&amp;#39;]): &lt;br/&gt; setParent(self, a0: typing.Optional[&amp;#39;QObject&amp;#39;]): &lt;br/&gt; children(self): &lt;br/&gt; killTimer(self, id: int): &lt;br/&gt; startTimer(self, interval: int, timerType: Qt.TimerType = ...): &lt;br/&gt; moveToThread(self, thread: typing.Optional[&amp;#39;QThread&amp;#39;]): &lt;br/&gt; thread(self): &lt;br/&gt; blockSignals(self, b: bool): &lt;br/&gt; signalsBlocked(self): &lt;br/&gt; isWindowType(self): &lt;br/&gt; isWidgetType(self): &lt;br/&gt; setObjectName(self, name: typing.Optional[str]): &lt;br/&gt; objectName(self): &lt;br/&gt; findChildren(self, type: typing.Type[QObjectT], name: typing.Optional[str] = ..., options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, types: typing.Tuple[typing.Type[QObjectT], ...], name: typing.Optional[str] = ..., options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, type: typing.Type[QObjectT], regExp: &amp;#39;QRegExp&amp;#39;, options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, types: typing.Tuple[typing.Type[QObjectT], ...], regExp: &amp;#39;QRegExp&amp;#39;, options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, type: typing.Type[QObjectT], re: &amp;#39;QRegularExpression&amp;#39;, options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, types: typing.Tuple[typing.Type[QObjectT], ...], re: &amp;#39;QRegularExpression&amp;#39;, options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChild(self, type: typing.Type[QObjectT], name: typing.Optional[str] = ..., options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChild(self, types: typing.Tuple[typing.Type[QObjectT], ...], name: typing.Optional[str] = ..., options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; tr(self, sourceText: typing.Optional[str], disambiguation: typing.Optional[str] = ..., n: int = ...): &lt;br/&gt; eventFilter(self, a0: typing.Optional[&amp;#39;QObject&amp;#39;], a1: typing.Optional[&amp;#39;QEvent&amp;#39;]): &lt;br/&gt; event(self, a0: typing.Optional[&amp;#39;QEvent&amp;#39;]): &lt;br/&gt; pyqtConfigure(self, a0: typing.Any): &lt;br/&gt; metaObject(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-159" y="1036" width="404" height="1240" as="geometry" />
    </mxCell>
    <mxCell id="node3" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.QtCore.QThread&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; finished: &lt;br/&gt; started: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; QThread.Priority: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, parent: typing.Optional[QObject] = ...): &lt;br/&gt; loopLevel(self): &lt;br/&gt; isInterruptionRequested(self): &lt;br/&gt; requestInterruption(self): &lt;br/&gt; setEventDispatcher(self, eventDispatcher: typing.Optional[QAbstractEventDispatcher]): &lt;br/&gt; eventDispatcher(self): &lt;br/&gt; usleep(a0: int): &lt;br/&gt; msleep(a0: int): &lt;br/&gt; sleep(a0: int): &lt;br/&gt; event(self, event: typing.Optional[QEvent]): &lt;br/&gt; setTerminationEnabled(enabled: bool = ...): &lt;br/&gt; exec(self): &lt;br/&gt; exec_(self): &lt;br/&gt; run(self): &lt;br/&gt; wait(self, msecs: int = ...): &lt;br/&gt; wait(self, deadline: QDeadlineTimer): &lt;br/&gt; quit(self): &lt;br/&gt; terminate(self): &lt;br/&gt; start(self, priority: &amp;#39;QThread.Priority&amp;#39; = ...): &lt;br/&gt; exit(self, returnCode: int = ...): &lt;br/&gt; stackSize(self): &lt;br/&gt; setStackSize(self, stackSize: int): &lt;br/&gt; priority(self): &lt;br/&gt; setPriority(self, priority: &amp;#39;QThread.Priority&amp;#39;): &lt;br/&gt; isRunning(self): &lt;br/&gt; isFinished(self): &lt;br/&gt; yieldCurrentThread(): &lt;br/&gt; idealThreadCount(): &lt;br/&gt; currentThreadId(): &lt;br/&gt; currentThread(): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-165" y="2337" width="416" height="833" as="geometry" />
    </mxCell>
    <mxCell id="node0" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.sip.simplewrapper&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, *args, **kwargs): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-70" y="811" width="227" height="68" as="geometry" />
    </mxCell>
    <mxCell id="node2" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.sip.wrapper&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-44" y="947" width="175" height="30" as="geometry" />
    </mxCell>
    <mxCell id="node6" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;app.inference_thread.DetectionThread&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; image_path: &lt;br/&gt; model: &lt;br/&gt; cutoff: &lt;br/&gt; class_name: &lt;br/&gt; finished_signal: &lt;br/&gt; error_signal: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, model_path, image_path, cutoff, class_name, parent=None): &lt;br/&gt; run(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-163" y="3231" width="413" height="232" as="geometry" />
    </mxCell>
    <mxCell id="node4" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;object&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __doc__: &lt;br/&gt; __dict__: &lt;br/&gt; __module__: &lt;br/&gt; __annotations__: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __class__(self): &lt;br/&gt; __class__(self, __type: type[object]): &lt;br/&gt; __init__(self): &lt;br/&gt; __new__(cls): &lt;br/&gt; __setattr__(self, __name: str, __value: Any): &lt;br/&gt; __delattr__(self, __name: str): &lt;br/&gt; __eq__(self, __value: object): &lt;br/&gt; __ne__(self, __value: object): &lt;br/&gt; __str__(self): &lt;br/&gt; __repr__(self): &lt;br/&gt; __hash__(self): &lt;br/&gt; __format__(self, __format_spec: str): &lt;br/&gt; __getattribute__(self, __name: str): &lt;br/&gt; __sizeof__(self): &lt;br/&gt; __reduce__(self): &lt;br/&gt; __reduce_ex__(self, __protocol: SupportsIndex): &lt;br/&gt; __reduce_ex__(self, __protocol: int): &lt;br/&gt; __getstate__(self): &lt;br/&gt; __dir__(self): &lt;br/&gt; __init_subclass__(cls): &lt;br/&gt; __subclasshook__(cls, __subclass: type): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-121" y="110" width="329" height="640" as="geometry" />
    </mxCell>
    <mxCell id="node5" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;typing.Hashable&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __hash__(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-37" y="-14" width="161" height="68" as="geometry" />
    </mxCell>
    <mxCell id="edge1" edge="1" value="" parent="1" source="node1" target="node2" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=0.500;entryY=1.001;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge5" edge="1" value="" parent="1" source="node3" target="node1" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=0.500;entryY=1.000;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge0" edge="1" value="" parent="1" source="node0" target="node4" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=0.500;entryY=1.000;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge2" edge="1" value="" parent="1" source="node2" target="node0" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.001;exitDx=0;exitDy=0;entryX=0.500;entryY=1.001;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge4" edge="1" value="" parent="1" source="node6" target="node3" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=0.500;entryY=1.000;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge3" edge="1" value="" parent="1" source="node4" target="node5" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=1;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=0.500;entryY=1.000;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
  </root>
</mxGraphModel>