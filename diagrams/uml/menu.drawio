<mxGraphModel dx="0" dy="0" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" background="none" math="0" shadow="0">
  <root>
    <mxCell id="0" />
    <mxCell id="1" parent="0" />
    <mxCell id="node5" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.QtCore.QObject&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; staticMetaObject: &lt;br/&gt; objectNameChanged: &lt;br/&gt; destroyed: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, parent: typing.Optional[&amp;#39;QObject&amp;#39;] = ...): &lt;br/&gt; disconnect(a0: &amp;#39;QMetaObject.Connection&amp;#39;): &lt;br/&gt; disconnect(self): &lt;br/&gt; isSignalConnected(self, signal: &amp;#39;QMetaMethod&amp;#39;): &lt;br/&gt; senderSignalIndex(self): &lt;br/&gt; disconnectNotify(self, signal: &amp;#39;QMetaMethod&amp;#39;): &lt;br/&gt; connectNotify(self, signal: &amp;#39;QMetaMethod&amp;#39;): &lt;br/&gt; customEvent(self, a0: typing.Optional[&amp;#39;QEvent&amp;#39;]): &lt;br/&gt; childEvent(self, a0: typing.Optional[&amp;#39;QChildEvent&amp;#39;]): &lt;br/&gt; timerEvent(self, a0: typing.Optional[&amp;#39;QTimerEvent&amp;#39;]): &lt;br/&gt; receivers(self, signal: PYQT_SIGNAL): &lt;br/&gt; sender(self): &lt;br/&gt; deleteLater(self): &lt;br/&gt; inherits(self, classname: typing.Optional[str]): &lt;br/&gt; parent(self): &lt;br/&gt; property(self, name: typing.Optional[str]): &lt;br/&gt; setProperty(self, name: typing.Optional[str], value: typing.Any): &lt;br/&gt; dynamicPropertyNames(self): &lt;br/&gt; dumpObjectTree(self): &lt;br/&gt; dumpObjectInfo(self): &lt;br/&gt; removeEventFilter(self, a0: typing.Optional[&amp;#39;QObject&amp;#39;]): &lt;br/&gt; installEventFilter(self, a0: typing.Optional[&amp;#39;QObject&amp;#39;]): &lt;br/&gt; setParent(self, a0: typing.Optional[&amp;#39;QObject&amp;#39;]): &lt;br/&gt; children(self): &lt;br/&gt; killTimer(self, id: int): &lt;br/&gt; startTimer(self, interval: int, timerType: Qt.TimerType = ...): &lt;br/&gt; moveToThread(self, thread: typing.Optional[&amp;#39;QThread&amp;#39;]): &lt;br/&gt; thread(self): &lt;br/&gt; blockSignals(self, b: bool): &lt;br/&gt; signalsBlocked(self): &lt;br/&gt; isWindowType(self): &lt;br/&gt; isWidgetType(self): &lt;br/&gt; setObjectName(self, name: typing.Optional[str]): &lt;br/&gt; objectName(self): &lt;br/&gt; findChildren(self, type: typing.Type[QObjectT], name: typing.Optional[str] = ..., options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, types: typing.Tuple[typing.Type[QObjectT], ...], name: typing.Optional[str] = ..., options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, type: typing.Type[QObjectT], regExp: &amp;#39;QRegExp&amp;#39;, options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, types: typing.Tuple[typing.Type[QObjectT], ...], regExp: &amp;#39;QRegExp&amp;#39;, options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, type: typing.Type[QObjectT], re: &amp;#39;QRegularExpression&amp;#39;, options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChildren(self, types: typing.Tuple[typing.Type[QObjectT], ...], re: &amp;#39;QRegularExpression&amp;#39;, options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChild(self, type: typing.Type[QObjectT], name: typing.Optional[str] = ..., options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; findChild(self, types: typing.Tuple[typing.Type[QObjectT], ...], name: typing.Optional[str] = ..., options: typing.Union[Qt.FindChildOptions, Qt.FindChildOption] = ...): &lt;br/&gt; tr(self, sourceText: typing.Optional[str], disambiguation: typing.Optional[str] = ..., n: int = ...): &lt;br/&gt; eventFilter(self, a0: typing.Optional[&amp;#39;QObject&amp;#39;], a1: typing.Optional[&amp;#39;QEvent&amp;#39;]): &lt;br/&gt; event(self, a0: typing.Optional[&amp;#39;QEvent&amp;#39;]): &lt;br/&gt; pyqtConfigure(self, a0: typing.Any): &lt;br/&gt; metaObject(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="1009" y="671" width="404" height="1240" as="geometry" />
    </mxCell>
    <mxCell id="node3" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.QtGui.QPaintDevice&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; QPaintDevice.PaintDeviceMetric: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self): &lt;br/&gt; devicePixelRatioFScale(): &lt;br/&gt; devicePixelRatioF(self): &lt;br/&gt; metric(self, metric: &amp;#39;QPaintDevice.PaintDeviceMetric&amp;#39;): &lt;br/&gt; devicePixelRatio(self): &lt;br/&gt; colorCount(self): &lt;br/&gt; paintingActive(self): &lt;br/&gt; depth(self): &lt;br/&gt; physicalDpiY(self): &lt;br/&gt; physicalDpiX(self): &lt;br/&gt; logicalDpiY(self): &lt;br/&gt; logicalDpiX(self): &lt;br/&gt; heightMM(self): &lt;br/&gt; widthMM(self): &lt;br/&gt; height(self): &lt;br/&gt; width(self): &lt;br/&gt; paintEngine(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="1473" y="175" width="369" height="472" as="geometry" />
    </mxCell>
    <mxCell id="node0" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.QtWidgets.QMenuBar&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; hovered: &lt;br/&gt; triggered: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, parent: typing.Optional[QWidget] = ...): &lt;br/&gt; setNativeMenuBar(self, nativeMenuBar: bool): &lt;br/&gt; isNativeMenuBar(self): &lt;br/&gt; timerEvent(self, a0: typing.Optional[QtCore.QTimerEvent]): &lt;br/&gt; event(self, a0: typing.Optional[QtCore.QEvent]): &lt;br/&gt; eventFilter(self, a0: typing.Optional[QtCore.QObject], a1: typing.Optional[QtCore.QEvent]): &lt;br/&gt; focusInEvent(self, a0: typing.Optional[QtGui.QFocusEvent]): &lt;br/&gt; focusOutEvent(self, a0: typing.Optional[QtGui.QFocusEvent]): &lt;br/&gt; actionEvent(self, a0: typing.Optional[QtGui.QActionEvent]): &lt;br/&gt; resizeEvent(self, a0: typing.Optional[QtGui.QResizeEvent]): &lt;br/&gt; paintEvent(self, a0: typing.Optional[QtGui.QPaintEvent]): &lt;br/&gt; leaveEvent(self, a0: typing.Optional[QtCore.QEvent]): &lt;br/&gt; mouseMoveEvent(self, a0: typing.Optional[QtGui.QMouseEvent]): &lt;br/&gt; mousePressEvent(self, a0: typing.Optional[QtGui.QMouseEvent]): &lt;br/&gt; mouseReleaseEvent(self, a0: typing.Optional[QtGui.QMouseEvent]): &lt;br/&gt; keyPressEvent(self, a0: typing.Optional[QtGui.QKeyEvent]): &lt;br/&gt; changeEvent(self, a0: typing.Optional[QtCore.QEvent]): &lt;br/&gt; initStyleOption(self, option: typing.Optional[&amp;#39;QStyleOptionMenuItem&amp;#39;], action: typing.Optional[QAction]): &lt;br/&gt; setVisible(self, visible: bool): &lt;br/&gt; cornerWidget(self, corner: QtCore.Qt.Corner = ...): &lt;br/&gt; setCornerWidget(self, widget: typing.Optional[QWidget], corner: QtCore.Qt.Corner = ...): &lt;br/&gt; actionAt(self, a0: QtCore.QPoint): &lt;br/&gt; actionGeometry(self, a0: typing.Optional[QAction]): &lt;br/&gt; heightForWidth(self, a0: int): &lt;br/&gt; minimumSizeHint(self): &lt;br/&gt; sizeHint(self): &lt;br/&gt; isDefaultUp(self): &lt;br/&gt; setDefaultUp(self, a0: bool): &lt;br/&gt; setActiveAction(self, action: typing.Optional[QAction]): &lt;br/&gt; activeAction(self): &lt;br/&gt; clear(self): &lt;br/&gt; insertSeparator(self, before: typing.Optional[QAction]): &lt;br/&gt; insertMenu(self, before: typing.Optional[QAction], menu: typing.Optional[QMenu]): &lt;br/&gt; addSeparator(self): &lt;br/&gt; addMenu(self, menu: typing.Optional[QMenu]): &lt;br/&gt; addMenu(self, title: typing.Optional[str]): &lt;br/&gt; addMenu(self, icon: QtGui.QIcon, title: typing.Optional[str]): &lt;br/&gt; addAction(self, action: typing.Optional[QAction]): &lt;br/&gt; addAction(self, text: typing.Optional[str]): &lt;br/&gt; addAction(self, text: typing.Optional[str], slot: PYQT_SLOT): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="388" y="1351" width="447" height="1048" as="geometry" />
    </mxCell>
    <mxCell id="node1" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.QtWidgets.QWidget&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; windowIconTextChanged: &lt;br/&gt; windowIconChanged: &lt;br/&gt; windowTitleChanged: &lt;br/&gt; customContextMenuRequested: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; QWidget.RenderFlag: &lt;br/&gt; QWidget.RenderFlags: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, parent: typing.Optional[&amp;#39;QWidget&amp;#39;] = ..., flags: typing.Union[QtCore.Qt.WindowFlags, QtCore.Qt.WindowType] = ...): &lt;br/&gt; screen(self): &lt;br/&gt; setWindowFlag(self, a0: QtCore.Qt.WindowType, on: bool = ...): &lt;br/&gt; hasTabletTracking(self): &lt;br/&gt; setTabletTracking(self, enable: bool): &lt;br/&gt; toolTipDuration(self): &lt;br/&gt; setToolTipDuration(self, msec: int): &lt;br/&gt; initPainter(self, painter: typing.Optional[QtGui.QPainter]): &lt;br/&gt; sharedPainter(self): &lt;br/&gt; nativeEvent(self, eventType: typing.Union[QtCore.QByteArray, bytes, bytearray], message: typing.Optional[PyQt5.sip.voidptr]): &lt;br/&gt; windowHandle(self): &lt;br/&gt; createWindowContainer(window: typing.Optional[QtGui.QWindow], parent: typing.Optional[&amp;#39;QWidget&amp;#39;] = ..., flags: typing.Union[QtCore.Qt.WindowFlags, QtCore.Qt.WindowType] = ...): &lt;br/&gt; grab(self, rectangle: QtCore.QRect = ...): &lt;br/&gt; hasHeightForWidth(self): &lt;br/&gt; setInputMethodHints(self, hints: typing.Union[QtCore.Qt.InputMethodHints, QtCore.Qt.InputMethodHint]): &lt;br/&gt; inputMethodHints(self): &lt;br/&gt; previousInFocusChain(self): &lt;br/&gt; contentsMargins(self): &lt;br/&gt; ungrabGesture(self, type: QtCore.Qt.GestureType): &lt;br/&gt; grabGesture(self, type: QtCore.Qt.GestureType, flags: typing.Union[QtCore.Qt.GestureFlags, QtCore.Qt.GestureFlag] = ...): &lt;br/&gt; setGraphicsEffect(self, effect: typing.Optional[&amp;#39;QGraphicsEffect&amp;#39;]): &lt;br/&gt; graphicsEffect(self): &lt;br/&gt; graphicsProxyWidget(self): &lt;br/&gt; windowFilePath(self): &lt;br/&gt; setWindowFilePath(self, filePath: typing.Optional[str]): &lt;br/&gt; nativeParentWidget(self): &lt;br/&gt; effectiveWinId(self): &lt;br/&gt; unsetLocale(self): &lt;br/&gt; locale(self): &lt;br/&gt; setLocale(self, locale: QtCore.QLocale): &lt;br/&gt; render(self, target: typing.Optional[QtGui.QPaintDevice], targetOffset: QtCore.QPoint = ..., sourceRegion: QtGui.QRegion = ..., flags: typing.Union[&amp;#39;QWidget.RenderFlags&amp;#39;, &amp;#39;QWidget.RenderFlag&amp;#39;] = ...): &lt;br/&gt; render(self, painter: typing.Optional[QtGui.QPainter], targetOffset: QtCore.QPoint = ..., sourceRegion: QtGui.QRegion = ..., flags: typing.Union[&amp;#39;QWidget.RenderFlags&amp;#39;, &amp;#39;QWidget.RenderFlag&amp;#39;] = ...): &lt;br/&gt; restoreGeometry(self, geometry: typing.Union[QtCore.QByteArray, bytes, bytearray]): &lt;br/&gt; saveGeometry(self): &lt;br/&gt; setShortcutAutoRepeat(self, id: int, enabled: bool = ...): &lt;br/&gt; styleSheet(self): &lt;br/&gt; setStyleSheet(self, styleSheet: typing.Optional[str]): &lt;br/&gt; setAutoFillBackground(self, enabled: bool): &lt;br/&gt; autoFillBackground(self): &lt;br/&gt; setWindowModality(self, windowModality: QtCore.Qt.WindowModality): &lt;br/&gt; windowModality(self): &lt;br/&gt; testAttribute(self, attribute: QtCore.Qt.WidgetAttribute): &lt;br/&gt; parentWidget(self): &lt;br/&gt; height(self): &lt;br/&gt; width(self): &lt;br/&gt; size(self): &lt;br/&gt; geometry(self): &lt;br/&gt; rect(self): &lt;br/&gt; isHidden(self): &lt;br/&gt; isVisible(self): &lt;br/&gt; updatesEnabled(self): &lt;br/&gt; underMouse(self): &lt;br/&gt; hasMouseTracking(self): &lt;br/&gt; setMouseTracking(self, enable: bool): &lt;br/&gt; fontInfo(self): &lt;br/&gt; fontMetrics(self): &lt;br/&gt; font(self): &lt;br/&gt; maximumHeight(self): &lt;br/&gt; maximumWidth(self): &lt;br/&gt; minimumHeight(self): &lt;br/&gt; minimumWidth(self): &lt;br/&gt; isModal(self): &lt;br/&gt; isEnabled(self): &lt;br/&gt; isWindow(self): &lt;br/&gt; winId(self): &lt;br/&gt; windowFlags(self): &lt;br/&gt; windowType(self): &lt;br/&gt; focusPreviousChild(self): &lt;br/&gt; focusNextChild(self): &lt;br/&gt; focusNextPrevChild(self, next: bool): &lt;br/&gt; destroy(self, destroyWindow: bool = ..., destroySubWindows: bool = ...): &lt;br/&gt; create(self, window: PyQt5.sip.voidptr = ..., initializeWindow: bool = ..., destroyOldWindow: bool = ...): &lt;br/&gt; updateMicroFocus(self): &lt;br/&gt; inputMethodQuery(self, a0: QtCore.Qt.InputMethodQuery): &lt;br/&gt; inputMethodEvent(self, a0: typing.Optional[QtGui.QInputMethodEvent]): &lt;br/&gt; metric(self, a0: QtGui.QPaintDevice.PaintDeviceMetric): &lt;br/&gt; changeEvent(self, a0: typing.Optional[QtCore.QEvent]): &lt;br/&gt; hideEvent(self, a0: typing.Optional[QtGui.QHideEvent]): &lt;br/&gt; showEvent(self, a0: typing.Optional[QtGui.QShowEvent]): &lt;br/&gt; dropEvent(self, a0: typing.Optional[QtGui.QDropEvent]): &lt;br/&gt; dragLeaveEvent(self, a0: typing.Optional[QtGui.QDragLeaveEvent]): &lt;br/&gt; dragMoveEvent(self, a0: typing.Optional[QtGui.QDragMoveEvent]): &lt;br/&gt; dragEnterEvent(self, a0: typing.Optional[QtGui.QDragEnterEvent]): &lt;br/&gt; actionEvent(self, a0: typing.Optional[QtGui.QActionEvent]): &lt;br/&gt; tabletEvent(self, a0: typing.Optional[QtGui.QTabletEvent]): &lt;br/&gt; contextMenuEvent(self, a0: typing.Optional[QtGui.QContextMenuEvent]): &lt;br/&gt; closeEvent(self, a0: typing.Optional[QtGui.QCloseEvent]): &lt;br/&gt; resizeEvent(self, a0: typing.Optional[QtGui.QResizeEvent]): &lt;br/&gt; moveEvent(self, a0: typing.Optional[QtGui.QMoveEvent]): &lt;br/&gt; paintEvent(self, a0: typing.Optional[QtGui.QPaintEvent]): &lt;br/&gt; leaveEvent(self, a0: typing.Optional[QtCore.QEvent]): &lt;br/&gt; enterEvent(self, a0: typing.Optional[QtCore.QEvent]): &lt;br/&gt; focusOutEvent(self, a0: typing.Optional[QtGui.QFocusEvent]): &lt;br/&gt; focusInEvent(self, a0: typing.Optional[QtGui.QFocusEvent]): &lt;br/&gt; keyReleaseEvent(self, a0: typing.Optional[QtGui.QKeyEvent]): &lt;br/&gt; keyPressEvent(self, a0: typing.Optional[QtGui.QKeyEvent]): &lt;br/&gt; wheelEvent(self, a0: typing.Optional[QtGui.QWheelEvent]): &lt;br/&gt; mouseMoveEvent(self, a0: typing.Optional[QtGui.QMouseEvent]): &lt;br/&gt; mouseDoubleClickEvent(self, a0: typing.Optional[QtGui.QMouseEvent]): &lt;br/&gt; mouseReleaseEvent(self, a0: typing.Optional[QtGui.QMouseEvent]): &lt;br/&gt; mousePressEvent(self, a0: typing.Optional[QtGui.QMouseEvent]): &lt;br/&gt; event(self, a0: typing.Optional[QtCore.QEvent]): &lt;br/&gt; isAncestorOf(self, child: typing.Optional[&amp;#39;QWidget&amp;#39;]): &lt;br/&gt; ensurePolished(self): &lt;br/&gt; paintEngine(self): &lt;br/&gt; setAttribute(self, attribute: QtCore.Qt.WidgetAttribute, on: bool = ...): &lt;br/&gt; childAt(self, p: QtCore.QPoint): &lt;br/&gt; childAt(self, ax: int, ay: int): &lt;br/&gt; find(a0: PyQt5.sip.voidptr): &lt;br/&gt; overrideWindowFlags(self, type: typing.Union[QtCore.Qt.WindowFlags, QtCore.Qt.WindowType]): &lt;br/&gt; setWindowFlags(self, type: typing.Union[QtCore.Qt.WindowFlags, QtCore.Qt.WindowType]): &lt;br/&gt; actions(self): &lt;br/&gt; removeAction(self, action: typing.Optional[&amp;#39;QAction&amp;#39;]): &lt;br/&gt; insertActions(self, before: typing.Optional[&amp;#39;QAction&amp;#39;], actions: typing.Iterable[&amp;#39;QAction&amp;#39;]): &lt;br/&gt; insertAction(self, before: typing.Optional[&amp;#39;QAction&amp;#39;], action: typing.Optional[&amp;#39;QAction&amp;#39;]): &lt;br/&gt; addActions(self, actions: typing.Iterable[&amp;#39;QAction&amp;#39;]): &lt;br/&gt; addAction(self, action: typing.Optional[&amp;#39;QAction&amp;#39;]): &lt;br/&gt; setAcceptDrops(self, on: bool): &lt;br/&gt; acceptDrops(self): &lt;br/&gt; nextInFocusChain(self): &lt;br/&gt; focusWidget(self): &lt;br/&gt; scroll(self, dx: int, dy: int): &lt;br/&gt; scroll(self, dx: int, dy: int, a2: QtCore.QRect): &lt;br/&gt; setParent(self, parent: typing.Optional[&amp;#39;QWidget&amp;#39;]): &lt;br/&gt; setParent(self, parent: typing.Optional[&amp;#39;QWidget&amp;#39;], f: typing.Union[QtCore.Qt.WindowFlags, QtCore.Qt.WindowType]): &lt;br/&gt; updateGeometry(self): &lt;br/&gt; setLayout(self, a0: typing.Optional[&amp;#39;QLayout&amp;#39;]): &lt;br/&gt; layout(self): &lt;br/&gt; contentsRect(self): &lt;br/&gt; getContentsMargins(self): &lt;br/&gt; setContentsMargins(self, left: int, top: int, right: int, bottom: int): &lt;br/&gt; setContentsMargins(self, margins: QtCore.QMargins): &lt;br/&gt; visibleRegion(self): &lt;br/&gt; heightForWidth(self, a0: int): &lt;br/&gt; setSizePolicy(self, a0: &amp;#39;QSizePolicy&amp;#39;): &lt;br/&gt; setSizePolicy(self, hor: &amp;#39;QSizePolicy.Policy&amp;#39;, ver: &amp;#39;QSizePolicy.Policy&amp;#39;): &lt;br/&gt; sizePolicy(self): &lt;br/&gt; minimumSizeHint(self): &lt;br/&gt; sizeHint(self): &lt;br/&gt; overrideWindowState(self, state: typing.Union[QtCore.Qt.WindowStates, QtCore.Qt.WindowState]): &lt;br/&gt; setWindowState(self, state: typing.Union[QtCore.Qt.WindowStates, QtCore.Qt.WindowState]): &lt;br/&gt; windowState(self): &lt;br/&gt; isFullScreen(self): &lt;br/&gt; isMaximized(self): &lt;br/&gt; isMinimized(self): &lt;br/&gt; isVisibleTo(self, a0: typing.Optional[&amp;#39;QWidget&amp;#39;]): &lt;br/&gt; adjustSize(self): &lt;br/&gt; setGeometry(self, a0: QtCore.QRect): &lt;br/&gt; setGeometry(self, ax: int, ay: int, aw: int, ah: int): &lt;br/&gt; resize(self, a0: QtCore.QSize): &lt;br/&gt; resize(self, w: int, h: int): &lt;br/&gt; move(self, a0: QtCore.QPoint): &lt;br/&gt; move(self, ax: int, ay: int): &lt;br/&gt; stackUnder(self, a0: typing.Optional[&amp;#39;QWidget&amp;#39;]): &lt;br/&gt; lower(self): &lt;br/&gt; raise_(self): &lt;br/&gt; close(self): &lt;br/&gt; showNormal(self): &lt;br/&gt; showFullScreen(self): &lt;br/&gt; showMaximized(self): &lt;br/&gt; showMinimized(self): &lt;br/&gt; hide(self): &lt;br/&gt; show(self): &lt;br/&gt; setHidden(self, hidden: bool): &lt;br/&gt; setVisible(self, visible: bool): &lt;br/&gt; repaint(self): &lt;br/&gt; repaint(self, x: int, y: int, w: int, h: int): &lt;br/&gt; repaint(self, a0: QtCore.QRect): &lt;br/&gt; repaint(self, a0: QtGui.QRegion): &lt;br/&gt; update(self): &lt;br/&gt; update(self, a0: QtCore.QRect): &lt;br/&gt; update(self, a0: QtGui.QRegion): &lt;br/&gt; update(self, ax: int, ay: int, aw: int, ah: int): &lt;br/&gt; setUpdatesEnabled(self, enable: bool): &lt;br/&gt; keyboardGrabber(): &lt;br/&gt; mouseGrabber(): &lt;br/&gt; setShortcutEnabled(self, id: int, enabled: bool = ...): &lt;br/&gt; releaseShortcut(self, id: int): &lt;br/&gt; grabShortcut(self, key: typing.Union[QtGui.QKeySequence, QtGui.QKeySequence.StandardKey, typing.Optional[str], int], context: QtCore.Qt.ShortcutContext = ...): &lt;br/&gt; releaseKeyboard(self): &lt;br/&gt; grabKeyboard(self): &lt;br/&gt; releaseMouse(self): &lt;br/&gt; grabMouse(self): &lt;br/&gt; grabMouse(self, a0: typing.Union[QtGui.QCursor, QtCore.Qt.CursorShape]): &lt;br/&gt; setContextMenuPolicy(self, policy: QtCore.Qt.ContextMenuPolicy): &lt;br/&gt; contextMenuPolicy(self): &lt;br/&gt; focusProxy(self): &lt;br/&gt; setFocusProxy(self, a0: typing.Optional[&amp;#39;QWidget&amp;#39;]): &lt;br/&gt; setTabOrder(a0: typing.Optional[&amp;#39;QWidget&amp;#39;], a1: typing.Optional[&amp;#39;QWidget&amp;#39;]): &lt;br/&gt; hasFocus(self): &lt;br/&gt; setFocusPolicy(self, policy: QtCore.Qt.FocusPolicy): &lt;br/&gt; focusPolicy(self): &lt;br/&gt; clearFocus(self): &lt;br/&gt; activateWindow(self): &lt;br/&gt; isActiveWindow(self): &lt;br/&gt; setFocus(self): &lt;br/&gt; setFocus(self, reason: QtCore.Qt.FocusReason): &lt;br/&gt; isLeftToRight(self): &lt;br/&gt; isRightToLeft(self): &lt;br/&gt; unsetLayoutDirection(self): &lt;br/&gt; layoutDirection(self): &lt;br/&gt; setLayoutDirection(self, direction: QtCore.Qt.LayoutDirection): &lt;br/&gt; setAccessibleDescription(self, description: typing.Optional[str]): &lt;br/&gt; accessibleDescription(self): &lt;br/&gt; setAccessibleName(self, name: typing.Optional[str]): &lt;br/&gt; accessibleName(self): &lt;br/&gt; whatsThis(self): &lt;br/&gt; setWhatsThis(self, a0: typing.Optional[str]): &lt;br/&gt; statusTip(self): &lt;br/&gt; setStatusTip(self, a0: typing.Optional[str]): &lt;br/&gt; toolTip(self): &lt;br/&gt; setToolTip(self, a0: typing.Optional[str]): &lt;br/&gt; isWindowModified(self): &lt;br/&gt; windowOpacity(self): &lt;br/&gt; setWindowOpacity(self, level: float): &lt;br/&gt; windowRole(self): &lt;br/&gt; setWindowRole(self, a0: typing.Optional[str]): &lt;br/&gt; windowIconText(self): &lt;br/&gt; setWindowIconText(self, a0: typing.Optional[str]): &lt;br/&gt; windowIcon(self): &lt;br/&gt; setWindowIcon(self, icon: QtGui.QIcon): &lt;br/&gt; windowTitle(self): &lt;br/&gt; setWindowTitle(self, a0: typing.Optional[str]): &lt;br/&gt; clearMask(self): &lt;br/&gt; mask(self): &lt;br/&gt; setMask(self, a0: QtGui.QBitmap): &lt;br/&gt; setMask(self, a0: QtGui.QRegion): &lt;br/&gt; unsetCursor(self): &lt;br/&gt; setCursor(self, a0: typing.Union[QtGui.QCursor, QtCore.Qt.CursorShape]): &lt;br/&gt; cursor(self): &lt;br/&gt; setFont(self, a0: QtGui.QFont): &lt;br/&gt; foregroundRole(self): &lt;br/&gt; setForegroundRole(self, a0: QtGui.QPalette.ColorRole): &lt;br/&gt; backgroundRole(self): &lt;br/&gt; setBackgroundRole(self, a0: QtGui.QPalette.ColorRole): &lt;br/&gt; setPalette(self, a0: QtGui.QPalette): &lt;br/&gt; palette(self): &lt;br/&gt; window(self): &lt;br/&gt; mapFrom(self, a0: typing.Optional[&amp;#39;QWidget&amp;#39;], a1: QtCore.QPoint): &lt;br/&gt; mapTo(self, a0: typing.Optional[&amp;#39;QWidget&amp;#39;], a1: QtCore.QPoint): &lt;br/&gt; mapFromParent(self, a0: QtCore.QPoint): &lt;br/&gt; mapToParent(self, a0: QtCore.QPoint): &lt;br/&gt; mapFromGlobal(self, a0: QtCore.QPoint): &lt;br/&gt; mapToGlobal(self, a0: QtCore.QPoint): &lt;br/&gt; setFixedHeight(self, h: int): &lt;br/&gt; setFixedWidth(self, w: int): &lt;br/&gt; setFixedSize(self, a0: QtCore.QSize): &lt;br/&gt; setFixedSize(self, w: int, h: int): &lt;br/&gt; setBaseSize(self, basew: int, baseh: int): &lt;br/&gt; setBaseSize(self, s: QtCore.QSize): &lt;br/&gt; baseSize(self): &lt;br/&gt; setSizeIncrement(self, w: int, h: int): &lt;br/&gt; setSizeIncrement(self, s: QtCore.QSize): &lt;br/&gt; sizeIncrement(self): &lt;br/&gt; setMaximumHeight(self, maxh: int): &lt;br/&gt; setMaximumWidth(self, maxw: int): &lt;br/&gt; setMinimumHeight(self, minh: int): &lt;br/&gt; setMinimumWidth(self, minw: int): &lt;br/&gt; setMaximumSize(self, maxw: int, maxh: int): &lt;br/&gt; setMaximumSize(self, s: QtCore.QSize): &lt;br/&gt; setMinimumSize(self, minw: int, minh: int): &lt;br/&gt; setMinimumSize(self, s: QtCore.QSize): &lt;br/&gt; maximumSize(self): &lt;br/&gt; minimumSize(self): &lt;br/&gt; childrenRegion(self): &lt;br/&gt; childrenRect(self): &lt;br/&gt; frameSize(self): &lt;br/&gt; pos(self): &lt;br/&gt; y(self): &lt;br/&gt; x(self): &lt;br/&gt; normalGeometry(self): &lt;br/&gt; frameGeometry(self): &lt;br/&gt; setWindowModified(self, a0: bool): &lt;br/&gt; setDisabled(self, a0: bool): &lt;br/&gt; setEnabled(self, a0: bool): &lt;br/&gt; isEnabledTo(self, a0: typing.Optional[&amp;#39;QWidget&amp;#39;]): &lt;br/&gt; setStyle(self, a0: typing.Optional[&amp;#39;QStyle&amp;#39;]): &lt;br/&gt; style(self): &lt;br/&gt; devType(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="-125" y="-13" width="447" height="6881" as="geometry" />
    </mxCell>
    <mxCell id="node4" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.sip.simplewrapper&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, *args, **kwargs): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="1141" y="276" width="227" height="68" as="geometry" />
    </mxCell>
    <mxCell id="node6" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;PyQt5.sip.wrapper&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="1104" y="475" width="175" height="30" as="geometry" />
    </mxCell>
    <mxCell id="node2" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;app.menu.MenuBar&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; parent: &lt;br/&gt; settings_menu: &lt;br/&gt; file_menu: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __init__(self, parent=None): &lt;br/&gt; openFile(self): &lt;br/&gt; openSettings(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="850" y="2482" width="204" height="184" as="geometry" />
    </mxCell>
    <mxCell id="node7" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;object&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __doc__: &lt;br/&gt; __dict__: &lt;br/&gt; __module__: &lt;br/&gt; __annotations__: &lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __class__(self): &lt;br/&gt; __class__(self, __type: type[object]): &lt;br/&gt; __init__(self): &lt;br/&gt; __new__(cls): &lt;br/&gt; __setattr__(self, __name: str, __value: Any): &lt;br/&gt; __delattr__(self, __name: str): &lt;br/&gt; __eq__(self, __value: object): &lt;br/&gt; __ne__(self, __value: object): &lt;br/&gt; __str__(self): &lt;br/&gt; __repr__(self): &lt;br/&gt; __hash__(self): &lt;br/&gt; __format__(self, __format_spec: str): &lt;br/&gt; __getattribute__(self, __name: str): &lt;br/&gt; __sizeof__(self): &lt;br/&gt; __reduce__(self): &lt;br/&gt; __reduce_ex__(self, __protocol: SupportsIndex): &lt;br/&gt; __reduce_ex__(self, __protocol: int): &lt;br/&gt; __getstate__(self): &lt;br/&gt; __dir__(self): &lt;br/&gt; __init_subclass__(cls): &lt;br/&gt; __subclasshook__(cls, __subclass: type): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="518" y="172" width="329" height="640" as="geometry" />
    </mxCell>
    <mxCell id="node8" parent="1" vertex="1" value="&lt;p style=&quot;margin:0px;margin-top:4px;text-align:center;&quot;&gt;&lt;b&gt;typing.Hashable&lt;/b&gt;&lt;/p&gt;&lt;hr size=&quot;1&quot;/&gt;&lt;p style=&quot;margin:0 0 0 4px;line-height:1.6;&quot;&gt; __hash__(self): &lt;/p&gt;" style="verticalAlign=top;align=left;overflow=fill;fontSize=14;fontFamily=Helvetica;html=1;rounded=0;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;">
      <mxGeometry x="913" y="204" width="161" height="68" as="geometry" />
    </mxCell>
    <mxCell id="edge1" edge="1" value="" parent="1" source="node5" target="node6" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.451;exitY=0.000;exitDx=0;exitDy=0;entryX=0.500;entryY=1.001;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge8" edge="1" value="" parent="1" source="node3" target="node7" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.000;exitY=0.535;exitDx=0;exitDy=0;entryX=1.000;entryY=0.448;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points">
          <mxPoint x="1161" y="428" />
          <mxPoint x="1161" y="458" />
        </Array>
      </mxGeometry>
    </mxCell>
    <mxCell id="edge6" edge="1" value="" parent="1" source="node0" target="node1" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.000;exitY=0.500;exitDx=0;exitDy=0;entryX=1.000;entryY=0.274;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge5" edge="1" value="" parent="1" source="node1" target="node5" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=1.000;exitY=0.190;exitDx=0;exitDy=0;entryX=0.000;entryY=0.500;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge7" edge="1" value="" parent="1" source="node1" target="node3" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=1.000;exitY=0.500;exitDx=0;exitDy=0;entryX=0.500;entryY=1.000;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points">
          <mxPoint x="1658" y="3427" />
        </Array>
      </mxGeometry>
    </mxCell>
    <mxCell id="edge0" edge="1" value="" parent="1" source="node4" target="node7" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=1.000;exitDx=0;exitDy=0;entryX=1.000;entryY=0.448;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points">
          <mxPoint x="1255" y="408" />
          <mxPoint x="1161" y="408" />
          <mxPoint x="1161" y="458" />
        </Array>
      </mxGeometry>
    </mxCell>
    <mxCell id="edge3" edge="1" value="" parent="1" source="node6" target="node4" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.951;exitY=0.001;exitDx=0;exitDy=0;entryX=0.566;entryY=1.001;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
    <mxCell id="edge2" edge="1" value="" parent="1" source="node2" target="node0" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=0;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=0.500;exitY=0.000;exitDx=0;exitDy=0;entryX=1.000;entryY=0.500;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points">
          <mxPoint x="952" y="1875" />
        </Array>
      </mxGeometry>
    </mxCell>
    <mxCell id="edge4" edge="1" value="" parent="1" source="node7" target="node8" style="html=1;rounded=1;edgeStyle=orthogonalEdgeStyle;dashed=1;startArrow=block;startSize=12;endArrow=none;strokeColor=#595959;exitX=1.000;exitY=0.099;exitDx=0;exitDy=0;entryX=0.000;entryY=0.500;entryDx=0;entryDy=0;">
      <mxGeometry width="50" height="50" relative="1" as="geometry">
        <Array as="points" />
      </mxGeometry>
    </mxCell>
  </root>
</mxGraphModel>